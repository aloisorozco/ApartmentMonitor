package com.big_hackathon.backend_v2.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.big_hackathon.backend_v2.filter.CustomOAuthSuccessHandler;
import com.big_hackathon.backend_v2.filter.OAuthValidationFilter;
import com.big_hackathon.backend_v2.filter.JwtUtil;

import lombok.SneakyThrows;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class AuthConfig {

    @Autowired
    private JwtUtil jwtUtil; 

    @Bean
    @SneakyThrows
    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http, CustomOAuthSuccessHandler customSuccessHandler){

        /* TODO:
            add basic authentication (hash + salts)
            add OIDC to authenticate the user - OAuth = authorization, OIDC = Authantication
            figure out how to store the users in the DB and fetch their data using OAuth - use the JWT (bearer token) for both OAuth (generated by provider) and make our own for basic Auth
        */
        // Telling spring all enpoints are authenticated and require authentication
        // This is just a rule telling Spring that everything must be authenticated - "how", is defined next
        http.csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(authorizeRequests -> authorizeRequests.anyRequest().authenticated())
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .oauth2Login(oauth -> oauth.successHandler(customSuccessHandler))
            .addFilterBefore(new OAuthValidationFilter(jwtUtil), UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
    
}
